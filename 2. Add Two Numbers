/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode();  // Dummy node to simplify code
        ListNode* current = dummy;
        int carry = 0;

        while (l1 || l2 || carry) {
            // Get values from the current nodes or 0 if the node is nullptr
            int val1 = l1 ? l1->val : 0;
            int val2 = l2 ? l2->val : 0;

            // Calculate the sum and carry for the current position
            int total_sum = val1 + val2 + carry;
            carry = total_sum / 10;
            int remainder = total_sum % 10;

            // Create a new node with the remainder and move to the next position
            current->next = new ListNode(remainder);
            current = current->next;

            // Move to the next nodes if available
            if (l1) {
                l1 = l1->next;
            }
            if (l2) {
                l2 = l2->next;
            }
        }

        return dummy->next;  // The actual result starts from the next node of the dummy node
    }
};
